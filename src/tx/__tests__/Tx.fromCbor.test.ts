import { TxBody, TxOut, UTxO } from "..";
import { Address, Value } from "../../ledger";
import { Tx } from "../Tx"

describe("Tx.fromCbor", () => {

    test.skip("parses simple IO tx", () => {

        const str = "84a30081825820d11531780938f9fc6110c968b8cd571c3b88aa8981bb52c296090958fe27848f000182825839000456f170a8ee5d0fb93458a394ba3a4d043db096e58c8a1f33a6681dcb15713c952715df00f231200e7a208ddeb718d05fcd34c5f0bfdb801b00000045d952e577825839000456f170a8ee5d0fb93458a394ba3a4d043db096e58c8a1f33a6681dcb15713c952715df00f231200e7a208ddeb718d05fcd34c5f0bfdb801a000f4240021a00029049a0f5f6";

        let tx!: Tx;
        expect(
            () => tx = Tx.fromCbor( str ),
        ).not.toThrow();

        // console.log( JSON.stringify(tx.toJSON(), null, 2) );

        const sameTx = new Tx({
            ...tx,
            body: {
                inputs: [
                    new UTxO({
                        utxoRef: {
                            id: "d11531780938f9fc6110c968b8cd571c3b88aa8981bb52c296090958fe27848f",
                            index: 0
                        },
                        resolved: TxOut.fake
                    })
                ],
                outputs: [
                    new TxOut({
                        address: Address.fromString("addr_test1qqz9duts4rh96raex3v289968fxsg0dsjmjcezslxwnxs8wtz4cne9f8zh0spu33yq885gydm6m335zle56vtu9lmwqq04se2u"),
                        value: Value.lovelaces( 299998831991 )
                    }),
                    new TxOut({
                        address: Address.fromString("addr_test1qqz9duts4rh96raex3v289968fxsg0dsjmjcezslxwnxs8wtz4cne9f8zh0spu33yq885gydm6m335zle56vtu9lmwqq04se2u"),
                        value: Value.lovelaces( 1_000_000 )
                    })
                ],
                fee: 168009,
            },
        });

        // expect same tx
        expect( JSON.stringify(tx.toJSON()) )
        .toEqual(JSON.stringify(sameTx.toJSON()));
        
        // expect different cbor
        expect( tx.toCbor().toString() ).toEqual(str)
        expect( sameTx.toCbor().toString() ).not.toEqual(str)

        // console.log( tx.hash.toString() );
        // console.log( sameTx.hash.toString() );
        
        // expect different hash
        // expect( tx.hash.toString() ).not.toEqual( sameTx.hash.toString() )

    });

    test("parses tx with plutus minting policy", () => {

        expect(
            () => 
            Tx.fromCbor(
                "84a600818258203ec172510007430a2acf65d1641689d55255e8aa8fa2800482d64aa2bb88caf4000d818258203ec172510007430a2acf65d1641689d55255e8aa8fa2800482d64aa2bb88caf4000182a2005839003a7a52bdf7c9445db07d902333ec5ba94cf012bf8a6586a606824ed37b1f87071222670a5d7504b843fe4038cd677bba7184ce12ca39f7a2011b00000045d9436e39a2005839003a7a52bdf7c9445db07d902333ec5ba94cf012bf8a6586a606824ed37b1f87071222670a5d7504b843fe4038cd677bba7184ce12ca39f7a201821a001e8480a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea145544f4b454e1a3b9aca00021a0002c54709a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea145544f4b454e1a3b9aca000b58204a9be8ef04017d85557512c3b40097344dc0dc3c58a3beaf0cd5ea772f643e95a2068147460100002249810581840100a246636f6e73747200466669656c647380821903201a0002754cf5f6"
            ).toJson(),
        ).not.toThrow();

    })

    test("tx with inline output datum", () => {

        expect(
            () => 
            Tx.fromCbor(
                "84a60081825820ef42c5fc55e62b32c3dd8e9c5c7692739d9a03d1cf6a329bb4ad5f03f49e2bbc000d81825820ef42c5fc55e62b32c3dd8e9c5c7692739d9a03d1cf6a329bb4ad5f03f49e2bbc000182a2005839004aceb8c360f356bc917b5c547ac4a72cdc6bd2d12a9138b96c9c8999951ee8b677ad1ad65cf38fa2cacd3564a5e2bdcb72405543b4fca9a7011b00000045d8df9874a300583900a9f0f6cb792035f3b50017a52a19c22715d8bc77223e9387236e8e62e38ebe88236fc97a21c1706403e8ff268d36fa961edaa248d840141e01821a001e8480a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea145544f4b454e1a3b9aca00028201d81846d8799f182aff021a0002c4ef09a1581c919d4c2c9455016289341b1a14dedf697687af31751170d56a31466ea145544f4b454e1a3b9aca000b5820508715c133b784a7a2a4a9cfe2b6f6dd115485d93b4f6fa284ff599549fe0c4ea2068147460100002249810581840100d87980821903201a0002754cf5f6"
            ).toJson()
        ).not.toThrow();
        
    });

    test("with some strange addr", () => {

        let tx!: Tx;
        expect(
            () => 
            tx = Tx.fromCbor(
                "84a30081825820e47b802209000d3bb27699429e2d763542f0b81ebdeacedadba79ddb3896ebdd040182a200583900da6512c7ff34f5dcd80fe65d4aedbe37ed256361efefb9ee541baac46ba0c056f51cd34c5fe60afe5e480047e73d2e30fe0ea44747e4b8f4011b00000001291d9f53a300581d703d1eaeb1eec9f2f7e185c82681398ca81d9b14a3655ccafb2aa2009b011a00e4e1c003d81859052d8202590528590525010000323232323232323232323232323232323232323232323232323232222533357346664446602c0024646466603800a466034006464660206e3ccc0700248c8004dd71aba10010013300c75c6eb0c07c0048c8c8c8cc0740288c8c8c8c8c8c8c8c8c8cc09c0408c8c8c8cc0ad4ccd5cd19b87011480004d5d080189aba1357440064646605a00246464660626606266062660626604c9201016100357466ae88d5d1004099813249016200330242330323371e6eb8d55ce800808899198199aba335744002266e1cdd69aab9e3574200290011bab35573c00200426604c921016300357466ae88d5d11aba20071330264901016400330303302d00701423233033357466ae880044cdc79bae35573a6ae840052201003756607800226604c9210165003232330325333573466e1c06120001357426ae880284d5d080511919191981b9981624810168003375e006646666605c03e0020024640026ae840040048c0c124101670013232323303a3303a3303a3303a3001008130010031300100213370e01066012028026266e1ccdc119b80003002375a6466660640164640026ae840040040048c0cd24010166003370401066e00ccc0cc02c06005cccc0cc02c058054dc42400066e04cc00805004ccc01c05004ccdc09980080a80a1980300a80a18179981a8009190009bab3041001303f0023574200266605600e0180166054660606605a00e02a4646466066004464646660720044c464a666ae68cc0e4cdc780d000899981d8019181d9919b8735573a6ea8005200001a23233303d01b24a046466607e0064c4646660820024c46466e3c004014dd71aba1001357420026eb8d5d08009aba1001100616375c6ae84004c100008d5d08009bab303d0023574200260720046eacc0e4004c0dc004dd598190019bac303300237586ae84004dd718150049bae302a008375c605400e6eb8c0a8018dd718150029bae302a004375c605400660540046eb8d5d08009bad3026003375a604c0046eb4d5d080098118011aba10010030020011498588cc0080052f5884600446ae80c00800488cc02884008888cc014008c00c0048cc020852891119802980200109801800912999ab9a00214a200244a666ae68004528899ab9c0024a04444464664a666ae68c005200010031533357346002900108020a999ab9a300148010401454ccd5cd1800a400c200c2c6e1cd55ce8009aab9e001375400a444464664a666ae68c005200010031533357346002900108020a999ab9a300148010401458dc39aab9d00135573c0026ea801094cd5ce0008b11119980210a4000444a666ae68cdc79bae35573a00400a266600e4290001112999ab9a3371e6eb8d55ce80100389bad35573c004260060026eacd55cf00109801800801980191111919980318020009801800801198020018011112999aab9f001003133002357420026ae88004c0048894ccd5cd198029aba30023371000290000b0a999ab9a3370e900000089aba10021330033574400466e01200100123230022330020020012300223300200200122333573400494400488c004d55cf1baa002225333573400400229408ccd5cd000a504a244464664a666ae68c005200010031533357346002900108020b1b8735573a0026aae78004dd500191aba1357446ae88d5d11aba2357446ae88d5d11aba20012357426ae88d5d11aba2357446ae88d5d11aba20012357426ae88d5d11aba2357446ae88d5d100091aba1357446ae88d5d11aba23574400246ae84d5d11aba2357446ae880048d5d09aba2357446ae880048d5d09aba23574400246ae84d5d100081021a000370eda0f5f6"
            )
        ).not.toThrow();

    });

    test("withdrawals", () => {

        let tx!: Tx;
        expect(
            () => 
            tx = Tx.fromCbor(
                "84aa008282582032a2077d399cf20a9fd0e652f01ed66bf02efe0f7607d291366b75d6fe9f60e4008258209c3ce983bf00e5c144c0e245917587cc56cbd897ffc14062baba46cb6d8cb5f901018282583900e51114e84575c91cc771904351ca3cba7cff55a6a3f56e39e07f97455627da345c522ab81cf9eaabf5b49e98bbe94cc14350287c7a1c9fc3821a001215e2a1581cb8794febdb27730a6f0476efe6736fb04fb24cd4f9bf02db150701dfa14b4d796e746820546f6b656e1a004c4b408258390049c89da058dba6828e4036edd5f71cb261adaafa01ad2792bdb4178c0fc5f7af23b824583d215863ba106258b565fba40115ea902f80bda3821a8d483776a1581cb8794febdb27730a6f0476efe6736fb04fb24cd4f9bf02db150701dfa14b4d796e746820546f6b656e1a05a995c0021a0002f889031a0306eb6b05a1581de00fc5f7af23b824583d215863ba106258b565fba40115ea902f80bda31a04ebc43f0b58205bba2da7639f4af19f0f584cb4f04ff74a124dae860b0fb9724c427b489cdf100d818258200f1503797adb2c9b1fc14e44dc0a733d0262a4bf55863ab173d5d30669770e6605108258390049c89da058dba6828e4036edd5f71cb261adaafa01ad2792bdb4178c0fc5f7af23b824583d215863ba106258b565fba40115ea902f80bda31a000ecc16111a003d7f2a12818258200e2d5effeb8e0d623917128e9e41f5bd7e3f6c6ec1de76e44d9af4cf0889144d00a10581840000d879808219fa6e1a0178ba15f5f6"
            )
        ).not.toThrow();

    });

});